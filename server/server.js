var app = require('express')();var http = require('http').Server(app);var Enumerable = require('linq');var io = require('socket.io').listen(http); http.listen(9898);var log4js = require('log4js');var log = log4js.getLogger();//var connectedPlayers = [];var waitingPlayers = [];var rooms = [];log.debug("Server started");io.sockets.on("connection", function (socket) {	log.debug(socket.id + " connected");		socket.on("game_find", function ()	{		if (waitingPlayers.indexOf(socket) == -1)			waitingPlayers.push(socket);				var roomID = waitingPlayers[0].id;		while (waitingPlayers.length > 1)		{			rooms.push({roomID : roomID, player1 : waitingPlayers[0], player2 : waitingPlayers[1]});						waitingPlayers[0].emit("game_found", { isWhite: true,  roomID: roomID});			waitingPlayers[1].emit("game_found", { isWhite: false, roomID: roomID});			log.debug('Game in room with ID = ' + roomID + ' started (' + waitingPlayers[0].id + ' vs ' + waitingPlayers[1].id + ')');			waitingPlayers.splice(0, 2);		}	});		socket.on("player_move", function (data)	{		/*"возникает, когда игрок делает обычный ход фигурой		playerColor - цвет фигур игрока, совершившего ход 		(Доступные значения: ""white"", ""black"")		from - координаты до хода		to - координаты после хода"*/		var room = Enumerable.from(rooms).			first(				function (r) 				{ 					return r.player1 == socket || r.player2 == socket;				});		var socket2 = room.player1 == socket ? room.player2 : room.player1;		socket2.emit(			"turn_move", 			{from : data.from, to : data.to, playerColor : room.player1 == socket ? "white" : "black"});	});	});