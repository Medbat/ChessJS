var app = require('express')();var http = require('http').Server(app);var Enumerable = require('linq');var io = require('socket.io').listen(http); http.listen(3056);var log4js = require('log4js');var log = log4js.getLogger();//var connectedPlayers = [];var waitingPlayers = [];var rooms = [];var subscribers = [];log.debug("Server started");io.sockets.on("connection", function (socket) {	log.debug(socket.id + " connected");		socket.on('disconnect', function()	{		StopFindingGame(socket);		if (index != -1)		{			waitingPlayers.splice(index, 1);		}		var index = subscribers.indexOf(socket);		if (index != -1)		{			subscribers.splice(index, 1);		}		LeaveRoom(socket);		log.debug(socket.id + ' disconnected from server');		socket.disconnect();	});	socket.on('roomsList_subscribe', function ()	{		if (subscribers.indexOf(socket) == -1)		{			subscribers.push(socket);			log.debug('Player ' + socket.id + ' subscribed on room list');			socket.emit('roomsList', GetDataForSubscribers());		}	});		socket.on('roomsList_unsubscribe', function ()	{		Unsubscribe(socket);	});		socket.on('room_enter', function (roomID)	{		var index = GetRoomIndexById(roomID);		if (index != -1)		{			Unsubscribe(socket);			socket.emit('game_logs', rooms[index].logs);			log.debug(socket.id + ' started watching room ' + roomID);			PushWatcherAt(index, socket);		}	});		socket.on('room_leave', function ()	{		if (LeaveRoom(socket))		{			log.debug(socket.id + ' left room');		}	});		socket.on("game_find", function ()	{		if (waitingPlayers.indexOf(socket) == -1)		{			waitingPlayers.push(socket);			log.debug('Player ' + socket.id + ' started searching games');		}				var roomID = waitingPlayers[0].id;		if (waitingPlayers.length > 1)		{			PushRoom(				{					roomID : roomID, 					player1 : waitingPlayers[0], 					player2 : waitingPlayers[1],					watchers : [],					logs : []				});			Unsubscribe(waitingPlayers[0]);			Unsubscribe(waitingPlayers[1]);			waitingPlayers[0].emit("game_found", { color: 'white',  roomID: roomID});			waitingPlayers[1].emit("game_found", { color: 'black', roomID: roomID});			log.debug('Game in room with ID = ' + roomID + ' started (' + 				waitingPlayers[0].id + ' vs ' + waitingPlayers[1].id + ')');			waitingPlayers.splice(0, 2);		}	});		socket.on('game_stopFinding', function ()	{		StopFindingGame(socket);	});		socket.on("turn_move", function (data)	{		var room = GetRoomWhereSocketIsPlayer(socket);		var socket2 = room.player1 == socket ? room.player2 : room.player1;		socket2.emit(			"player_move", 			{from : data.from, to : data.to, playerColor : room.player1 == socket ? "white" : "black"});		log.debug(socket.id + ' to ' + socket2.id + ': ' + data.from.x + data.from.y + ' -> ' + 			data.to.x + data.to.y + ' (' +			(room.player1 == socket ? "white" : "black") + ')');		room.logs.push({moveType : 'move', moveData : data});		NotifySubscribers(room, 'player_move', data);	});		socket.on('turn_castling', function (data)	{		var room = GetRoomWhereSocketIsPlayer(socket);		var socket2 = room.player1 == socket ? room.player2 : room.player1;		socket2.emit(			"player_castling", 			{from : data.from, playerColor : room.player1 == socket ? "white" : "black"});		log.debug(socket.id + ' to ' + socket2.id + ': castling with rook at ' + data.from.x + data.from.y + 			'' + (room.player1 == socket ? "white" : "black"));		room.logs.push({moveType : 'castling', moveData : data});		NotifySubscribers(room, 'player_castling', data);	});		socket.on('turn_promotion', function (data)	{		var room = GetRoomWhereSocketIsPlayer(socket);		var socket2 = room.player1 == socket ? room.player2 : room.player1;		socket2.emit(			"player_promotion", 			{				from : data.from, 				to: data.to, 				playerColor : room.player1 == socket ? "white" : "black",				newPiece : data.newPiece			});		log.debug(socket.id + ' to ' + socket2.id + ': promoting pawn ' + data.from.x + data.from.y + 			' -> ' + data.to.x + data.to.y + ' into ' + data.newPiece + ' (' + 			(room.player1 == socket ? "white" : "black") + ')');		room.logs.push({moveType : 'promotion', moveData : data});		NotifySubscribers(room, 'player_promotion', data);	});		socket.on('turn_mate', function ()	{		var room = GetRoomWhereSocketIsPlayer(socket);		var socket2 = room.player1 == socket ? room.player2 : room.player1;		socket2.emit('player_mate');		log.debug(socket.id + ' thinks he lost');	});		socket.on('turn_draw', function ()	{		var room = GetRoomWhereSocketIsPlayer(socket);		var socket2 = room.player1 == socket ? room.player2 : room.player1;		socket2.emit('player_draw');		log.debug(socket.id + ' thinks its draw');	});		socket.on('turnValidation_invalid', function ()	{		var room = GetRoomWhereSocketIsPlayer(socket);		var socket2 = room.player1 == socket ? room.player2 : room.player1;		log.debug(socket.id + ' thinks his opponent is cheating!');		socket.emit('game_end', { msg : 'invalid turn', winnerColor : socket == room.player1 ? 'white' : 'black'});		socket2.emit('game_end', { msg : 'invalid turn', winnerColor : socket == room.player1 ? 'white' : 'black'});	});		socket.on('turnValidation_mate', function ()	{		var room = GetRoomWhereSocketIsPlayer(socket);		if (room == null)			return;		var socket2 = room.player1 == socket ? room.player2 : room.player1;		var data = { msg : 'mate', winnerColor : socket == room.player1 ? 'white' : 'black'};		log.debug(socket.id + ' (' + 			(socket == room.player1 ? 'white' : 'black') + 			') accepted his win. Room ' + room.roomID + ' closed');		NotifyAllAtRoom(room, 'game_end', data);		var index = GetRoomIndexById(room.roomID);		SpliceRoom(index);	});		socket.on('turnValidation_draw', function ()	{		var room = GetRoomWhereSocketIsPlayer(socket);		if (room == null)			return;		var socket2 = room.player1 == socket ? room.player2 : room.player1;		var data = { msg : 'draw', winnerColor : null};		log.debug(socket.id + ' (' + 			(socket == room.player1 ? 'white' : 'black') + 			') accepted draw. Room ' + room.roomID + ' closed');		NotifyAllAtRoom(room, 'game_end', data);		var index = GetRoomIndexById(room.roomID);		SpliceRoom(index);	});	});function SpliceRoom(index){	rooms.splice(index, 1);	UpdateRoomListForSubscribers();}function PushRoom(room){	rooms.push(room);	UpdateRoomListForSubscribers();}function PushWatcherAt(roomIndex, watcher){	rooms[roomIndex].watchers.push(watcher);	UpdateRoomListForSubscribers();}function SpliceWatcherAt(roomIndex, watcherIndex){	rooms[roomIndex].watchers.splice(watcherIndex, 1);	UpdateRoomListForSubscribers();}function GetDataForSubscribers(){	return Enumerable.from(rooms).select(function(r)					{						return { roomID : r.roomID, length : 2 + r.watchers.length };					}).toArray();}function UpdateRoomListForSubscribers(){	log.debug('updating room list info for subscribers');	var data = GetDataForSubscribers();	for (var i = 0; i < subscribers.length; i++)	{		subscribers[i].emit('roomsList', data);	}}function NotifyAllAtRoom(room, what, data){			room.player1.emit(what, data);	room.player2.emit(what, data);	var index = Enumerable.from(rooms).indexOf(function (r) {r.roomID == room.roomID});	NotifySubscribers(room, what, data);}function NotifySubscribers(room, what, data){	for (var i = 0; i < room.watchers.length; i++)	{		room.watchers[i].emit(what, data);	}}function GetRoomWhereSocketIsPlayer(socket){	var room = Enumerable.from(rooms).					where(						function (r) 						{ 							return r.player1 == socket || r.player2 == socket;						});	if (room.any())		return room.first();	else		return null;}function StopFindingGame(socket){	var index = waitingPlayers.indexOf(socket);	if (index != -1)	{		log.debug('Player ' + socket.id + ' stopped searching games');		waitingPlayers.splice(index, 1);	}}function GetRoomIndexById(id){	for (var i = 0; i < rooms.length; i++)	{		if (rooms[i].roomID == id)			return i;	}	return -1;}function LeaveRoom(socket){	for (var i = 0; i < rooms.length; i++)	{		var index = rooms[i].watchers.indexOf(socket);		if (index != -1)		{			SpliceWatcherAt(i, index);			return true;		}				if (rooms[i].player1 == socket || rooms[i].player2 == socket)		{			var data = { msg: 'leave', winnerColor : (rooms[i].player2 == socket ? 'white' : 'black' ) };			NotifyAllAtRoom(rooms[i], 'game_end', data);			SpliceRoom(i);			return true;		}	}	return false;}function Unsubscribe(socket){	var index = subscribers.indexOf(socket);	if (index != -1)	{		subscribers.splice(index, 1);		log.debug('Player ' + socket.id + ' unsubscribed from room list');	}} 